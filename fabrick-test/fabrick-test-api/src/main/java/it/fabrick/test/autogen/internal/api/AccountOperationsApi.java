/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.fabrick.test.autogen.internal.api;

import it.fabrick.test.autogen.internal.dtos.CustomErrorResponse;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.LocalDate;
import it.fabrick.test.autogen.internal.dtos.ModelApiResponse;
import it.fabrick.test.autogen.internal.dtos.PaymentRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-10-23T13:11:51.430867700+02:00[Europe/Rome]")
@Validated
@Tag(name = "accountOperations", description = "the accountOperations API")
public interface AccountOperationsApi {

    /**
     * GET /api/test/account/{accountId}/balance : Finds accounts
     * Multiple status values can be provided with comma separated strings
     *
     * @param accountId  (required)
     * @param xTimeZone  (optional, default to Europe/Rome)
     * @param authSchema  (optional, default to S2S)
     * @param apikey  (optional, default to FXOVVXXHVCPVPBZXIJOBGUGSKHDNFRRQJP)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     *         or Invalid status value (status code 500)
     */
    @Operation(
        operationId = "getBalance",
        summary = "Finds accounts",
        description = "Multiple status values can be provided with comma separated strings",
        tags = { "accountOperations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Invalid status value", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/test/account/{accountId}/balance",
        produces = { "application/json" }
    )
    ResponseEntity<ModelApiResponse> getBalance(
        @Parameter(name = "accountId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Long accountId,
        @Parameter(name = "X-Time-Zone", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "X-Time-Zone", required = false, defaultValue = "Europe/Rome") String xTimeZone,
        @Parameter(name = "Auth-Schema", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "Auth-Schema", required = false, defaultValue = "S2S") String authSchema,
        @Parameter(name = "apikey", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "apikey", required = false, defaultValue = "FXOVVXXHVCPVPBZXIJOBGUGSKHDNFRRQJP") String apikey
    );


    /**
     * GET /api/test/account/{accountId}/transactions : Finds accounts
     * Multiple status values can be provided with comma separated strings
     *
     * @param accountId  (required)
     * @param fromDate  (required)
     * @param toDate  (required)
     * @param xTimeZone  (optional, default to Europe/Rome)
     * @param authSchema  (optional, default to S2S)
     * @param apikey  (optional, default to FXOVVXXHVCPVPBZXIJOBGUGSKHDNFRRQJP)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     *         or Invalid status value (status code 500)
     */
    @Operation(
        operationId = "getHistoryTransaction",
        summary = "Finds accounts",
        description = "Multiple status values can be provided with comma separated strings",
        tags = { "accountOperations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Invalid status value", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/test/account/{accountId}/transactions",
        produces = { "application/json" }
    )
    ResponseEntity<ModelApiResponse> getHistoryTransaction(
        @Parameter(name = "accountId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Long accountId,
        @NotNull @Pattern(regexp = "^\\d{4}-\\d{2}-\\d{2}$") @Parameter(name = "fromDate", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "fromDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate fromDate,
        @NotNull @Pattern(regexp = "^\\d{4}-\\d{2}-\\d{2}$") @Parameter(name = "toDate", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "toDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate toDate,
        @Parameter(name = "X-Time-Zone", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "X-Time-Zone", required = false, defaultValue = "Europe/Rome") String xTimeZone,
        @Parameter(name = "Auth-Schema", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "Auth-Schema", required = false, defaultValue = "S2S") String authSchema,
        @Parameter(name = "apikey", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "apikey", required = false, defaultValue = "FXOVVXXHVCPVPBZXIJOBGUGSKHDNFRRQJP") String apikey
    );


    /**
     * POST /api/test/account/{accountId}/payments/money-transfers : Finds accounts
     * Multiple status values can be provided with comma separated strings
     *
     * @param accountId  (required)
     * @param xTimeZone  (optional, default to Europe/Rome)
     * @param authSchema  (optional, default to S2S)
     * @param apikey  (optional, default to FXOVVXXHVCPVPBZXIJOBGUGSKHDNFRRQJP)
     * @param paymentRequest  (optional)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     *         or Invalid status value (status code 500)
     */
    @Operation(
        operationId = "requestMoneyTransfer",
        summary = "Finds accounts",
        description = "Multiple status values can be provided with comma separated strings",
        tags = { "accountOperations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Invalid status value", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/test/account/{accountId}/payments/money-transfers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ModelApiResponse> requestMoneyTransfer(
        @Parameter(name = "accountId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Long accountId,
        @Parameter(name = "X-Time-Zone", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "X-Time-Zone", required = false, defaultValue = "Europe/Rome") String xTimeZone,
        @Parameter(name = "Auth-Schema", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "Auth-Schema", required = false, defaultValue = "S2S") String authSchema,
        @Parameter(name = "apikey", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "apikey", required = false, defaultValue = "FXOVVXXHVCPVPBZXIJOBGUGSKHDNFRRQJP") String apikey,
        @Parameter(name = "PaymentRequest", description = "") @Valid @RequestBody(required = false) PaymentRequest paymentRequest
    );

}
